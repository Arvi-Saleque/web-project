datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")   // use the pooled Neon URL
  directUrl = env("DIRECT_URL")    // optional: non-pooled URL for migrations
}

generator client {
  provider = "prisma-client-js"
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String   // Hashed password
  name      String
  role      UserRole @default(STUDENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Profile relations based on role
  adminProfile    AdminProfile?
  teacherProfile  TeacherProfile?
  studentProfile  StudentProfile?

  @@index([email])
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
}

// Admin Profile
model AdminProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  position  String?  // e.g., "Principal", "Vice Principal"
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Teacher Profile
model TeacherProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject      String?
  qualification String?
  phone        String?
  address      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Student Profile
model StudentProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rollNumber   String?  @unique
  class        String?
  section      String?
  dateOfBirth  DateTime?
  parentName   String?
  parentPhone  String?
  address      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([rollNumber])
}